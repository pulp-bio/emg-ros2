// Generated by gencpp from file gapwatch_wrapper/EMG.msg
// DO NOT EDIT!


#ifndef GAPWATCH_WRAPPER_MESSAGE_EMG_H
#define GAPWATCH_WRAPPER_MESSAGE_EMG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gapwatch_wrapper
{
template <class ContainerAllocator>
struct EMG_
{
  typedef EMG_<ContainerAllocator> Type;

  EMG_()
    : emg()
    , battery()
    , counter()
    , ts()  {
      emg.assign(0.0);

      battery.assign(0);

      counter.assign(0);

      ts.assign(0);
  }
  EMG_(const ContainerAllocator& _alloc)
    : emg()
    , battery()
    , counter()
    , ts()  {
  (void)_alloc;
      emg.assign(0.0);

      battery.assign(0);

      counter.assign(0);

      ts.assign(0);
  }



   typedef boost::array<float, 80>  _emg_type;
  _emg_type emg;

   typedef boost::array<uint8_t, 1>  _battery_type;
  _battery_type battery;

   typedef boost::array<uint8_t, 1>  _counter_type;
  _counter_type counter;

   typedef boost::array<uint64_t, 1>  _ts_type;
  _ts_type ts;





  typedef boost::shared_ptr< ::gapwatch_wrapper::EMG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gapwatch_wrapper::EMG_<ContainerAllocator> const> ConstPtr;

}; // struct EMG_

typedef ::gapwatch_wrapper::EMG_<std::allocator<void> > EMG;

typedef boost::shared_ptr< ::gapwatch_wrapper::EMG > EMGPtr;
typedef boost::shared_ptr< ::gapwatch_wrapper::EMG const> EMGConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gapwatch_wrapper::EMG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gapwatch_wrapper::EMG_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gapwatch_wrapper::EMG_<ContainerAllocator1> & lhs, const ::gapwatch_wrapper::EMG_<ContainerAllocator2> & rhs)
{
  return lhs.emg == rhs.emg &&
    lhs.battery == rhs.battery &&
    lhs.counter == rhs.counter &&
    lhs.ts == rhs.ts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gapwatch_wrapper::EMG_<ContainerAllocator1> & lhs, const ::gapwatch_wrapper::EMG_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gapwatch_wrapper

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gapwatch_wrapper::EMG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gapwatch_wrapper::EMG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gapwatch_wrapper::EMG_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a78d4218423202e0323f407914156a1d";
  }

  static const char* value(const ::gapwatch_wrapper::EMG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa78d4218423202e0ULL;
  static const uint64_t static_value2 = 0x323f407914156a1dULL;
};

template<class ContainerAllocator>
struct DataType< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gapwatch_wrapper/EMG";
  }

  static const char* value(const ::gapwatch_wrapper::EMG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[80] emg\n"
"uint8[1] battery\n"
"uint8[1] counter\n"
"uint64[1] ts\n"
"\n"
;
  }

  static const char* value(const ::gapwatch_wrapper::EMG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emg);
      stream.next(m.battery);
      stream.next(m.counter);
      stream.next(m.ts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EMG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gapwatch_wrapper::EMG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gapwatch_wrapper::EMG_<ContainerAllocator>& v)
  {
    s << indent << "emg[]" << std::endl;
    for (size_t i = 0; i < v.emg.size(); ++i)
    {
      s << indent << "  emg[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.emg[i]);
    }
    s << indent << "battery[]" << std::endl;
    for (size_t i = 0; i < v.battery.size(); ++i)
    {
      s << indent << "  battery[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.battery[i]);
    }
    s << indent << "counter[]" << std::endl;
    for (size_t i = 0; i < v.counter.size(); ++i)
    {
      s << indent << "  counter[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.counter[i]);
    }
    s << indent << "ts[]" << std::endl;
    for (size_t i = 0; i < v.ts.size(); ++i)
    {
      s << indent << "  ts[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.ts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAPWATCH_WRAPPER_MESSAGE_EMG_H
